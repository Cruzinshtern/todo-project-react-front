import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import LocalStorageService from '../services/localStorage.service';
import { USER_TOKEN } from '../constants/constants';
import type { PaginatedTodosResponse, Todo } from '../interfaces/todo.interface';

export const todosApi = createApi({
  // Unique key for RTK Query reducer in Redux store
  reducerPath: 'todosApi',
  // Base function to perform requests (uses fetch API)
  baseQuery: fetchBaseQuery({
    baseUrl: 'http://localhost:8000', // Base URL API
    prepareHeaders: (headers, { getState }) => {
      // Add authorization token (as in axios interceptor)
      // Here we can get token from Redux or the local storage
      const token = LocalStorageService.getItem(USER_TOKEN); // Or from getState() if the token is from Redux
      if (token) {
        headers.set('authorization', token);
      }
      return headers;
    },
  }),
  // Tags for caching: allow to invalidate cache and reload data
  tagTypes: ['Todos'],
  endpoints: (builder) => ({
    // Query: get todo list (pagination, filtration)
    getTodos: builder.query<
      PaginatedTodosResponse,
      { page?: number; limit?: number; status?: string }
    >({
      query: ({ page = 1, limit = 10, status }) => {
        // Form query string with pagination and filtration
        let queryString = `/tasks?page=${page}&limit=${limit}`;
        if (status) {
          queryString += `&status=${status}`;
        }
        return queryString;
      },
      // Transform response if necessary
      // transformResponse: (response: any) => { /* some transformation */ return response; },
      providesTags: (result) =>
        result
          ? [
              ...result.data.map(({ _id }) => ({ type: 'Todos' as const, _id })),
              { type: 'Todos', id: 'LIST' },
            ]
          : [{ type: 'Todos', id: 'LIST' }],
    }),

    // Mutation: add new todo
    addTodo: builder.mutation<Todo, Partial<Todo>>({
      query: (newTodo) => ({
        url: '/tasks',
        method: 'POST',
        body: newTodo,
      }),
      // Invalidate cache of the todo list, so that it's updated after addition
      invalidatesTags: [{ type: 'Todos', id: 'LIST' }],
    }),

    // Mutation: update todos
    updateTodo: builder.mutation<Todo, { id: string; body: Partial<Todo> }>({
      query: ({ id, body }) => ({
        url: `/tasks/${id}`,
        method: 'PATCH',
        body: body,
      }),
      // Invalidate cache of a certain todo and the list to update UI
      invalidatesTags: (result, error, { id }) => [
        { type: 'Todos', id },
        { type: 'Todos', id: 'LIST' },
      ],
    }),

    // Mutation: delete todo
    deleteTodo: builder.mutation<void, string>({
      query: (id) => ({
        url: `/tasks/${id}`,
        method: 'DELETE',
      }),
      // Invalidate cache of the list after deletion
      invalidatesTags: [{ type: 'Todos', id: 'LIST' }],
    }),
  }),
});

// Export the hooks generated by RTK Query to be used by the components
export const {
  useGetTodosQuery,
  useAddTodoMutation,
  useUpdateTodoMutation,
  useDeleteTodoMutation,
} = todosApi;
